//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Ur
{
    [Serializable]
    public class RobotStateRTMsgMsg : Message
    {
        public const string k_RosMessageName = "ur_msgs/RobotStateRTMsg";
        public override string RosMessageName => k_RosMessageName;

        //  Data structure for the realtime communications interface (aka Matlab interface)
        //  used by the Universal Robots controller
        //  
        //  This data structure is send at 125 Hz on TCP port 30003
        //  
        //  Dokumentation can be found on the Universal Robots Support Wiki
        //  (http://wiki03.lynero.net/Technical/RealTimeClientInterface?rev=9)
        public double time;
        public double[] q_target;
        public double[] qd_target;
        public double[] qdd_target;
        public double[] i_target;
        public double[] m_target;
        public double[] q_actual;
        public double[] qd_actual;
        public double[] i_actual;
        public double[] tool_acc_values;
        public double[] tcp_force;
        public double[] tool_vector;
        public double[] tcp_speed;
        public double digital_input_bits;
        public double[] motor_temperatures;
        public double controller_timer;
        public double test_value;
        public double robot_mode;
        public double[] joint_modes;

        public RobotStateRTMsgMsg()
        {
            this.time = 0.0;
            this.q_target = new double[0];
            this.qd_target = new double[0];
            this.qdd_target = new double[0];
            this.i_target = new double[0];
            this.m_target = new double[0];
            this.q_actual = new double[0];
            this.qd_actual = new double[0];
            this.i_actual = new double[0];
            this.tool_acc_values = new double[0];
            this.tcp_force = new double[0];
            this.tool_vector = new double[0];
            this.tcp_speed = new double[0];
            this.digital_input_bits = 0.0;
            this.motor_temperatures = new double[0];
            this.controller_timer = 0.0;
            this.test_value = 0.0;
            this.robot_mode = 0.0;
            this.joint_modes = new double[0];
        }

        public RobotStateRTMsgMsg(double time, double[] q_target, double[] qd_target, double[] qdd_target, double[] i_target, double[] m_target, double[] q_actual, double[] qd_actual, double[] i_actual, double[] tool_acc_values, double[] tcp_force, double[] tool_vector, double[] tcp_speed, double digital_input_bits, double[] motor_temperatures, double controller_timer, double test_value, double robot_mode, double[] joint_modes)
        {
            this.time = time;
            this.q_target = q_target;
            this.qd_target = qd_target;
            this.qdd_target = qdd_target;
            this.i_target = i_target;
            this.m_target = m_target;
            this.q_actual = q_actual;
            this.qd_actual = qd_actual;
            this.i_actual = i_actual;
            this.tool_acc_values = tool_acc_values;
            this.tcp_force = tcp_force;
            this.tool_vector = tool_vector;
            this.tcp_speed = tcp_speed;
            this.digital_input_bits = digital_input_bits;
            this.motor_temperatures = motor_temperatures;
            this.controller_timer = controller_timer;
            this.test_value = test_value;
            this.robot_mode = robot_mode;
            this.joint_modes = joint_modes;
        }

        public static RobotStateRTMsgMsg Deserialize(MessageDeserializer deserializer) => new RobotStateRTMsgMsg(deserializer);

        private RobotStateRTMsgMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.time);
            deserializer.Read(out this.q_target, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out this.qd_target, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out this.qdd_target, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out this.i_target, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out this.m_target, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out this.q_actual, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out this.qd_actual, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out this.i_actual, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out this.tool_acc_values, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out this.tcp_force, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out this.tool_vector, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out this.tcp_speed, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out this.digital_input_bits);
            deserializer.Read(out this.motor_temperatures, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out this.controller_timer);
            deserializer.Read(out this.test_value);
            deserializer.Read(out this.robot_mode);
            deserializer.Read(out this.joint_modes, sizeof(double), deserializer.ReadLength());
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.time);
            serializer.WriteLength(this.q_target);
            serializer.Write(this.q_target);
            serializer.WriteLength(this.qd_target);
            serializer.Write(this.qd_target);
            serializer.WriteLength(this.qdd_target);
            serializer.Write(this.qdd_target);
            serializer.WriteLength(this.i_target);
            serializer.Write(this.i_target);
            serializer.WriteLength(this.m_target);
            serializer.Write(this.m_target);
            serializer.WriteLength(this.q_actual);
            serializer.Write(this.q_actual);
            serializer.WriteLength(this.qd_actual);
            serializer.Write(this.qd_actual);
            serializer.WriteLength(this.i_actual);
            serializer.Write(this.i_actual);
            serializer.WriteLength(this.tool_acc_values);
            serializer.Write(this.tool_acc_values);
            serializer.WriteLength(this.tcp_force);
            serializer.Write(this.tcp_force);
            serializer.WriteLength(this.tool_vector);
            serializer.Write(this.tool_vector);
            serializer.WriteLength(this.tcp_speed);
            serializer.Write(this.tcp_speed);
            serializer.Write(this.digital_input_bits);
            serializer.WriteLength(this.motor_temperatures);
            serializer.Write(this.motor_temperatures);
            serializer.Write(this.controller_timer);
            serializer.Write(this.test_value);
            serializer.Write(this.robot_mode);
            serializer.WriteLength(this.joint_modes);
            serializer.Write(this.joint_modes);
        }

        public override string ToString()
        {
            return "RobotStateRTMsgMsg: " +
            "\ntime: " + time.ToString() +
            "\nq_target: " + System.String.Join(", ", q_target.ToList()) +
            "\nqd_target: " + System.String.Join(", ", qd_target.ToList()) +
            "\nqdd_target: " + System.String.Join(", ", qdd_target.ToList()) +
            "\ni_target: " + System.String.Join(", ", i_target.ToList()) +
            "\nm_target: " + System.String.Join(", ", m_target.ToList()) +
            "\nq_actual: " + System.String.Join(", ", q_actual.ToList()) +
            "\nqd_actual: " + System.String.Join(", ", qd_actual.ToList()) +
            "\ni_actual: " + System.String.Join(", ", i_actual.ToList()) +
            "\ntool_acc_values: " + System.String.Join(", ", tool_acc_values.ToList()) +
            "\ntcp_force: " + System.String.Join(", ", tcp_force.ToList()) +
            "\ntool_vector: " + System.String.Join(", ", tool_vector.ToList()) +
            "\ntcp_speed: " + System.String.Join(", ", tcp_speed.ToList()) +
            "\ndigital_input_bits: " + digital_input_bits.ToString() +
            "\nmotor_temperatures: " + System.String.Join(", ", motor_temperatures.ToList()) +
            "\ncontroller_timer: " + controller_timer.ToString() +
            "\ntest_value: " + test_value.ToString() +
            "\nrobot_mode: " + robot_mode.ToString() +
            "\njoint_modes: " + System.String.Join(", ", joint_modes.ToList());
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
