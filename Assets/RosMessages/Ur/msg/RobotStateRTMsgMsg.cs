//Do not edit! This file was generated by Unity-ROS MessageGeneration.

using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Ur
{
    [Serializable]
    public class RobotStateRTMsgMsg : Message
    {
        public const string k_RosMessageName = "ur_msgs/RobotStateRTMsg";
        public override string RosMessageName => k_RosMessageName;

        //  Data structure for the realtime communications interface (aka Matlab interface)
        //  used by the Universal Robots controller
        //  
        //  This data structure is send at 125 Hz on TCP port 30003
        //  
        //  Dokumentation can be found on the Universal Robots Support Wiki
        //  (http://wiki03.lynero.net/Technical/RealTimeClientInterface?rev=9)
        public double time;
        public double[] q_target;
        public double[] qd_target;
        public double[] qdd_target;
        public double[] i_target;
        public double[] m_target;
        public double[] q_actual;
        public double[] qd_actual;
        public double[] i_actual;
        public double[] tool_acc_values;
        public double[] tcp_force;
        public double[] tool_vector;
        public double[] tcp_speed;
        public double digital_input_bits;
        public double[] motor_temperatures;
        public double controller_timer;
        public double test_value;
        public double robot_mode;
        public double[] joint_modes;

        public RobotStateRTMsgMsg()
        {
            time = 0.0;
            q_target = new double[0];
            qd_target = new double[0];
            qdd_target = new double[0];
            i_target = new double[0];
            m_target = new double[0];
            q_actual = new double[0];
            qd_actual = new double[0];
            i_actual = new double[0];
            tool_acc_values = new double[0];
            tcp_force = new double[0];
            tool_vector = new double[0];
            tcp_speed = new double[0];
            digital_input_bits = 0.0;
            motor_temperatures = new double[0];
            controller_timer = 0.0;
            test_value = 0.0;
            robot_mode = 0.0;
            joint_modes = new double[0];
        }

        public RobotStateRTMsgMsg(double time, double[] q_target, double[] qd_target, double[] qdd_target,
            double[] i_target, double[] m_target, double[] q_actual, double[] qd_actual, double[] i_actual,
            double[] tool_acc_values, double[] tcp_force, double[] tool_vector, double[] tcp_speed,
            double digital_input_bits, double[] motor_temperatures, double controller_timer, double test_value,
            double robot_mode, double[] joint_modes)
        {
            this.time = time;
            this.q_target = q_target;
            this.qd_target = qd_target;
            this.qdd_target = qdd_target;
            this.i_target = i_target;
            this.m_target = m_target;
            this.q_actual = q_actual;
            this.qd_actual = qd_actual;
            this.i_actual = i_actual;
            this.tool_acc_values = tool_acc_values;
            this.tcp_force = tcp_force;
            this.tool_vector = tool_vector;
            this.tcp_speed = tcp_speed;
            this.digital_input_bits = digital_input_bits;
            this.motor_temperatures = motor_temperatures;
            this.controller_timer = controller_timer;
            this.test_value = test_value;
            this.robot_mode = robot_mode;
            this.joint_modes = joint_modes;
        }

        public static RobotStateRTMsgMsg Deserialize(MessageDeserializer deserializer)
        {
            return new RobotStateRTMsgMsg(deserializer);
        }

        private RobotStateRTMsgMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out time);
            deserializer.Read(out q_target, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out qd_target, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out qdd_target, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out i_target, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out m_target, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out q_actual, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out qd_actual, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out i_actual, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out tool_acc_values, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out tcp_force, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out tool_vector, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out tcp_speed, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out digital_input_bits);
            deserializer.Read(out motor_temperatures, sizeof(double), deserializer.ReadLength());
            deserializer.Read(out controller_timer);
            deserializer.Read(out test_value);
            deserializer.Read(out robot_mode);
            deserializer.Read(out joint_modes, sizeof(double), deserializer.ReadLength());
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(time);
            serializer.WriteLength(q_target);
            serializer.Write(q_target);
            serializer.WriteLength(qd_target);
            serializer.Write(qd_target);
            serializer.WriteLength(qdd_target);
            serializer.Write(qdd_target);
            serializer.WriteLength(i_target);
            serializer.Write(i_target);
            serializer.WriteLength(m_target);
            serializer.Write(m_target);
            serializer.WriteLength(q_actual);
            serializer.Write(q_actual);
            serializer.WriteLength(qd_actual);
            serializer.Write(qd_actual);
            serializer.WriteLength(i_actual);
            serializer.Write(i_actual);
            serializer.WriteLength(tool_acc_values);
            serializer.Write(tool_acc_values);
            serializer.WriteLength(tcp_force);
            serializer.Write(tcp_force);
            serializer.WriteLength(tool_vector);
            serializer.Write(tool_vector);
            serializer.WriteLength(tcp_speed);
            serializer.Write(tcp_speed);
            serializer.Write(digital_input_bits);
            serializer.WriteLength(motor_temperatures);
            serializer.Write(motor_temperatures);
            serializer.Write(controller_timer);
            serializer.Write(test_value);
            serializer.Write(robot_mode);
            serializer.WriteLength(joint_modes);
            serializer.Write(joint_modes);
        }

        public override string ToString()
        {
            return "RobotStateRTMsgMsg: " +
                   "\ntime: " + time.ToString() +
                   "\nq_target: " + string.Join(", ", q_target.ToList()) +
                   "\nqd_target: " + string.Join(", ", qd_target.ToList()) +
                   "\nqdd_target: " + string.Join(", ", qdd_target.ToList()) +
                   "\ni_target: " + string.Join(", ", i_target.ToList()) +
                   "\nm_target: " + string.Join(", ", m_target.ToList()) +
                   "\nq_actual: " + string.Join(", ", q_actual.ToList()) +
                   "\nqd_actual: " + string.Join(", ", qd_actual.ToList()) +
                   "\ni_actual: " + string.Join(", ", i_actual.ToList()) +
                   "\ntool_acc_values: " + string.Join(", ", tool_acc_values.ToList()) +
                   "\ntcp_force: " + string.Join(", ", tcp_force.ToList()) +
                   "\ntool_vector: " + string.Join(", ", tool_vector.ToList()) +
                   "\ntcp_speed: " + string.Join(", ", tcp_speed.ToList()) +
                   "\ndigital_input_bits: " + digital_input_bits.ToString() +
                   "\nmotor_temperatures: " + string.Join(", ", motor_temperatures.ToList()) +
                   "\ncontroller_timer: " + controller_timer.ToString() +
                   "\ntest_value: " + test_value.ToString() +
                   "\nrobot_mode: " + robot_mode.ToString() +
                   "\njoint_modes: " + string.Join(", ", joint_modes.ToList());
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}